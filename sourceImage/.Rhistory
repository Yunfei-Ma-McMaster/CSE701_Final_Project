library(jpeg)
library(colorspace)
library(tidyverse)
library(tools)
library(magick)
filename = list.files(pattern = "*.jpg")
row = 50
col = 50
for (k in 1:length(filename))
{
#load the image
img = readJPEG(filename[k])
#get height and width of the image
height_of_image = dim(img)[1]
width_of_image = dim(img)[2]
step_height = trunc(height_of_image / row)
step_width = trunc(width_of_image / col)
#get rgb colors of the image
r = img[,,1]
g = img[,,2]
b = img[,,3]
matrix_L = matrix(0,row,col)
matrix_U = matrix(0,row,col)
matrix_V = matrix(0,row,col)
#create data frame for LUV color
for(i in seq(1,row))
{
for (ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
}
for(ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
for (j in seq(1,col))
{
matrix_L[i,j] = matrix_L[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "L"])
matrix_U[i,j] = matrix_U[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "U"])
matrix_V[i,j] = matrix_V[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "V"])
}
}
}
dev = as.vector(rep(step_width*step_height,row))
matrix_L = matrix_L / dev
matrix_U = matrix_U / dev
matrix_V = matrix_V / dev
write.table(matrix_L,paste(file_path_sans_ext(filename[k]),"_l",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_U,paste(file_path_sans_ext(filename[k]),"_u",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_V,paste(file_path_sans_ext(filename[k]),"_v",".csv",sep = ""),row.names=FALSE,sep = ",")
print(k)
}
library(jpeg)
library(colorspace)
library(tidyverse)
library(magick)
row = 50
col = 50
paintings = read_csv("tileimages/paintings.csv")
names_of_paintings = paintings$Painting
library(jpeg)
library(colorspace)
library(tidyverse)
library(tools)
library(magick)
filename = list.files(pattern = "*.jpg")
row = 50
col = 50
for (k in 1:length(filename))
{
#load the image
img = readJPEG(filename[k])
#get height and width of the image
height_of_image = dim(img)[1]
width_of_image = dim(img)[2]
step_height = trunc(height_of_image / row)
step_width = trunc(width_of_image / col)
#get rgb colors of the image
r = img[,,1]
g = img[,,2]
b = img[,,3]
matrix_L = matrix(0,row,col)
matrix_U = matrix(0,row,col)
matrix_V = matrix(0,row,col)
#create data frame for LUV color
for(i in seq(1,row))
{
for (ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
}
for(ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
for (j in seq(1,col))
{
matrix_L[i,j] = matrix_L[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "L"])
matrix_U[i,j] = matrix_U[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "U"])
matrix_V[i,j] = matrix_V[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "V"])
}
}
}
dev = as.vector(rep(step_width*step_height,row))
matrix_L = matrix_L / dev
matrix_U = matrix_U / dev
matrix_V = matrix_V / dev
write.table(matrix_L,paste(file_path_sans_ext(filename[k]),"_l",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_U,paste(file_path_sans_ext(filename[k]),"_u",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_V,paste(file_path_sans_ext(filename[k]),"_v",".csv",sep = ""),row.names=FALSE,sep = ",")
print(k)
}
library(jpeg)
library(colorspace)
library(tidyverse)
library(magick)
library(tools)
paintings = read_csv("paintings.csv")
names_of_paintings = paintings$Painting
row = 50
col = 50
filename = list.files(path = "outputImageCSV/",pattern = "*.csv")
pre_filename = list.files(path = "outputImages/", pattern = "*.jpg")
for (i in 1:length(pre_filename))
{
file.remove(paste("outputImages/", pre_filename[i], sep = ""))
}
for(i in 1:length(names_of_paintings))
{
img = image_read(paste("paintings/", names_of_paintings[i], ".jpg",sep = ""))
img = image_scale(img,"5x5!")
image_write(img,path = paste("paintings/tileimage_resize/", names_of_paintings[i], ".jpg", sep = ""), format = "jpg",quality = 100)
}
#set the "matrix" for mosaic with a initial image
img = image_read("paintings/tileimage_resize/Acrobate et jeune arlequin.jpg")
input = rep(img,row*col)
for(k in 1:length(filename))
{
image_dir_csv_name = paste("outputImageCSV/",filename[k], sep = "")
tile_distribution_data = read_csv(image_dir_csv_name,col_names = FALSE)
print(paste("Generating file: ","outputImages/", file_path_sans_ext(filename[k]), ".jpg", sep = ""))
#make the mosaic
for (i in 1:row)
{
for (j in 1:col)
{
img = image_read(paste("paintings/tileimage_resize/",
tile_distribution_data[i,j], ".jpg",sep = ""))
input[(i-1) * row + j] = img
}
}
img = image_montage(input,tile = paste(row,"x",col,sep = ""),
geometry = geometry_area(width = row,height = col, x_off = 0,y_off = 0))
image_write(img, path = paste("outputImages/", file_path_sans_ext(filename[k]), ".jpg", sep = ""), format = "jpg")
}
library(jpeg)
library(colorspace)
library(tidyverse)
library(tools)
library(magick)
filename = list.files(pattern = "*.jpg")
row = 50
col = 50
for (k in 1:length(filename))
{
#load the image
img = readJPEG(filename[k])
#get height and width of the image
height_of_image = dim(img)[1]
width_of_image = dim(img)[2]
step_height = trunc(height_of_image / row)
step_width = trunc(width_of_image / col)
#get rgb colors of the image
r = img[,,1]
g = img[,,2]
b = img[,,3]
matrix_L = matrix(0,row,col)
matrix_U = matrix(0,row,col)
matrix_V = matrix(0,row,col)
#create data frame for LUV color
for(i in seq(1,row))
{
for (ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
}
for(ii in seq(step_height * (i-1) + 1, step_height * i))
{
x = RGB(r[ii,],g[ii,],b[ii,])
cord = coords(as(x,"LUV"))
for (j in seq(1,col))
{
matrix_L[i,j] = matrix_L[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "L"])
matrix_U[i,j] = matrix_U[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "U"])
matrix_V[i,j] = matrix_V[i,j] + sum(cord[(step_width * (j-1) + 1):(j*step_width), "V"])
}
}
}
dev = as.vector(rep(step_width*step_height,row))
matrix_L = matrix_L / dev
matrix_U = matrix_U / dev
matrix_V = matrix_V / dev
write.table(matrix_L,paste(file_path_sans_ext(filename[k]),"_l",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_U,paste(file_path_sans_ext(filename[k]),"_u",".csv",sep = ""),row.names=FALSE,sep = ",")
write.table(matrix_V,paste(file_path_sans_ext(filename[k]),"_v",".csv",sep = ""),row.names=FALSE,sep = ",")
print(k)
}
library(jpeg)
library(colorspace)
library(tidyverse)
library(magick)
library(tools)
paintings = read_csv("paintings.csv")
names_of_paintings = paintings$Painting
row = 50
col = 50
filename = list.files(path = "outputImageCSV/",pattern = "*.csv")
pre_filename = list.files(path = "outputImages/", pattern = "*.jpg")
for (i in 1:length(pre_filename))
{
file.remove(paste("outputImages/", pre_filename[i], sep = ""))
}
for(i in 1:length(names_of_paintings))
{
img = image_read(paste("paintings/", names_of_paintings[i], ".jpg",sep = ""))
img = image_scale(img,"5x5!")
image_write(img,path = paste("paintings/tileimage_resize/", names_of_paintings[i], ".jpg", sep = ""), format = "jpg",quality = 100)
}
#set the "matrix" for mosaic with a initial image
img = image_read("paintings/tileimage_resize/Acrobate et jeune arlequin.jpg")
input = rep(img,row*col)
for(k in 1:length(filename))
{
image_dir_csv_name = paste("outputImageCSV/",filename[k], sep = "")
tile_distribution_data = read_csv(image_dir_csv_name,col_names = FALSE)
print(paste("Generating file: ","outputImages/", file_path_sans_ext(filename[k]), ".jpg", sep = ""))
#make the mosaic
for (i in 1:row)
{
for (j in 1:col)
{
img = image_read(paste("paintings/tileimage_resize/",
tile_distribution_data[i,j], ".jpg",sep = ""))
input[(i-1) * row + j] = img
}
}
img = image_montage(input,tile = paste(row,"x",col,sep = ""),
geometry = geometry_area(width = row,height = col, x_off = 0,y_off = 0))
image_write(img, path = paste("outputImages/", file_path_sans_ext(filename[k]), ".jpg", sep = ""), format = "jpg")
}
